from typing import List, Union

from models import Model
from recipes import QAWithContext


class Chain:
    """Base chain class.
    """
    def __init__(self, model: Model):
        """Class initialization function.

        Args:
            model (Model): Text generation model.
        """
        self.model = model
        
        self.system_message = None
        # self.chain_template = None
        self.previous_links = None
    
    def run_chain(self) -> None:
        """Empty chain runner.

        Raises:
            NotImplementedError: This function is not implemented in this class.
        """
        raise NotImplementedError()


class IterativeImprovement(Chain):
    """Iterative improvement chain class.

    Args:
        Chain (class): Base chain class.
    """
    def __init__(self, model: Model, num_rounds: int, chain_of_thought: bool = False):
        """Class initialization function.

        Args:
            model (Model): Text generation model.
            num_rounds (int): Number of iterative improvement rounds.
            chain_of_thought (bool, optional): Whether to use chain-of-thought prompting. Defaults to False.
        """
        super().__init__(model=model)
        
        self.num_rounds = num_rounds
        self.chain_of_thought = chain_of_thought
        self.system_message = \
            "You are a truthful and helpful oracle. You will be provided with a background text passage as context, " \
            "a question, and previous answers to this question. Please check if the most recent answer is correct. If " \
            "the most recent answer is correct, repeat the most recent answer and add \"QED.\" at the end. If the most " \
            "recent answer is incorrect, please correct the most recent answer and explain where the most recent answer went wrong."
        self.context_template = "{context}\n\nQuestion: {prompt}"
    
    def run_chain(self, prompts: List[str], contexts: Union[str, List[str]]) -> List[str]:
        """Iterative improvement chain runner.

        Args:
            prompts (List[str]): List of unformatted prompts.
            contexts (List[str]): Context string or list of context strings.

        Returns:
            List[str]: List of text strings generated by the model.
        """
        original_prompts = prompts
        
        for round in range(self.num_rounds):
            if round == 0:
                self.previous_links = contexts
                system_message = None
                context_template = None
            else:
                self.previous_links = \
                    [f"{prompt}\n\nAnswer: {generation}" for prompt, generation in zip(prompts, generations)]
                system_message = self.system_message
                context_template = self.context_template
            
            recipe = QAWithContext(
                system_message=system_message,
                context_template=context_template,
                chain_of_thought=self.chain_of_thought
            )
            
            prompts, generations = recipe.call_recipe(
                prompts=original_prompts,
                contexts=self.previous_links,
                model=self.model
            )
        
        return prompts, generations


class Debate(Chain):
    """Debate chain class.

    Args:
        Chain (class): Base chain class.
    """
    def __init__(self):
        super().__init__()
        self.system_message = None
        self.chain_template = None
